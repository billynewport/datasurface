apiVersion: batch/v1
kind: Job
metadata:
  name: {{ psp_k8s_name }}-ring1-init
  namespace: {{ namespace_name }}
spec:
  template:
    spec:
      serviceAccountName: {{ airflow_k8s_name }}-service-account
      containers:
      - name: ring1-init
        image: {{ datasurface_docker_image }}
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "🔄 Starting Ring 1 Initialization for {{ psp_name }} (AWS)"
            
            # Install AWS CLI and boto3 if not present
            pip install boto3 > /dev/null 2>&1 || echo "boto3 already installed"
            
            # Fetch credentials from AWS Secrets Manager
            echo "🔐 Fetching credentials from AWS Secrets Manager..."
            python3 << 'EOF'
            import boto3
            import json
            import os
            
            def get_secret(secret_name):
                client = boto3.client('secretsmanager', region_name='{{ aws_region | default("us-east-1") }}')
                try:
                    response = client.get_secret_value(SecretId=secret_name)
                    return json.loads(response['SecretString'])
                except Exception as e:
                    print(f"Error fetching secret {secret_name}: {e}")
                    return {}
            
            # Fetch merge database credentials
            merge_creds = get_secret('datasurface/merge/credentials')
            if merge_creds:
                os.environ['{{ merge_db_credential_secret_name }}_USER'] = merge_creds.get('postgres_USER', '')
                os.environ['{{ merge_db_credential_secret_name }}_PASSWORD'] = merge_creds.get('postgres_PASSWORD', '')
                print("✅ Merge database credentials loaded")
            
            # Fetch Git credentials
            git_creds = get_secret('datasurface/git/credentials')
            if git_creds:
                os.environ['git_TOKEN'] = git_creds.get('token', '')
                print("✅ Git credentials loaded")
            
            print("🔐 All credentials loaded from AWS Secrets Manager")
            EOF
            
            # Run Ring 1 initialization for platform using cache-aware CLI
            echo "🔧 Running Ring 1 initialization with shared cache..."
            python -m datasurface.cmd.platform generatePlatformBootstrap \
              --ringLevel 1 \
              --git-repo-path {{ git_cache_local_path }} \
              --git-repo-owner {{ git_repo_owner }} \
              --git-repo-name {{ git_repo_repo_name }} \
              --git-repo-branch {{ git_repo_branch }} \
              --git-platform-repo-credential-name {{ git_credential_name }} \
            {% if git_cache_enabled %}--use-git-cache \
            {% endif %}--max-cache-age-minutes {{ git_cache_max_age_minutes }} \
              --output /workspace/generated_artifacts \
              --psp {{ psp_name }}
            
            echo "✅ Ring 1 initialization complete for {{ psp_name }}!"
        env:
          - name: PYTHONPATH
            value: "/app/src"
          - name: AWS_REGION
            value: "{{ aws_region | default('us-east-1') }}"
        volumeMounts:
        {% if git_cache_enabled %}
        - name: git-model-cache
          mountPath: {{ git_cache_local_path }}
        {% endif %}
        - name: workspace
          mountPath: /workspace
      volumes:
      {% if git_cache_enabled %}
      - name: git-model-cache
        persistentVolumeClaim:
          claimName: {{ git_clone_cache_pvc }}
      {% endif %}
      - name: workspace
        emptyDir: {}
      restartPolicy: Never
  backoffLimit: 3
